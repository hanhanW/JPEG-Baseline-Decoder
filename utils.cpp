#include "utils.h"
#include <cmath>

uint16_t econv16(uint16_t n) {
  return (n << 8) | (n >> 8);
}

void zigzag(const int16_t zz[], int16_t mat[8][8]) {
  static int idx[] =
  { 0, 1, 5, 6, 14, 15, 27, 28,
    2, 4, 7, 13, 16, 26, 29, 42,
    3, 8, 12, 17, 25, 30, 41, 43,
    9, 11, 18, 24, 31, 40, 44, 53,
    10, 19, 23, 32, 39, 45, 52, 54,
    20, 22, 33, 38, 46, 51, 55, 60,
    21, 34, 37, 47, 50, 56, 59, 61,
    35, 36, 48, 49, 57, 58, 62, 63,
  };
  for (int i=0; i<8; i++) {
    for (int j=0; j<8; j++) {
      mat[i][j] = zz[idx[i*8+j]];
    }
  }
}

double s[4], c[5], sq8;
int idct_inited;

static void idct_init()
{
  double PI = acos(-1.0);
  for (int i = 1; i < 4; i++) s[i] = sin(i * PI / 16.0);
  for (int i = 1; i < 5; i++) c[i] = cos(i * PI / 16.0);
  sq8 = sqrt(8.0);
  idct_inited = 1;
}

void idct8(double *F, double *f)
{
  double t[2][8];
  t[0][0] = F[0] / sq8 + F[4] / sq8;
  t[0][1] = F[0] / sq8 - F[4] / sq8;
  t[0][2] = F[2] / 2.0 * s[2] - F[6] / 2.0 * c[2];
  t[0][3] = F[2] / 2.0 * c[2] + F[6] / 2.0 * s[2];
  t[0][4] = F[1] / 2.0 * c[1] + F[7] / 2.0 * s[1];
  t[0][5] = F[1] / 2.0 * s[1] - F[7] / 2.0 * c[1];
  t[0][6] = F[3] / 2.0 * c[3] + F[5] / 2.0 * s[3];
  t[0][7] = F[3] / 2.0 * s[3] - F[5] / 2.0 * c[3];
  t[1][0] = t[0][0] + t[0][3];
  t[1][1] = t[0][1] + t[0][2];
  t[1][2] = t[0][1] - t[0][2];
  t[1][3] = t[0][0] - t[0][3];
  t[1][4] = t[0][4] + t[0][6];
  t[1][5] = (t[0][5] + t[0][7]) * c[4];
  t[1][6] = (t[0][4] - t[0][6]) * c[4];
  t[1][7] = t[0][5] - t[0][7];
  t[0][5] = t[1][5] + t[1][6];
  t[0][6] = t[1][5] - t[1][6];
  t[1][5] = t[0][5];
  t[1][6] = t[0][6];
  t[0][0] = t[1][0] + t[1][4];
  t[0][1] = t[1][1] + t[1][5];
  t[0][2] = t[1][2] + t[1][6];
  t[0][3] = t[1][3] + t[1][7];
  t[0][4] = t[1][0] - t[1][4];
  t[0][5] = t[1][1] - t[1][5];
  t[0][6] = t[1][2] - t[1][6];
  t[0][7] = t[1][3] - t[1][7];
  f[8*0] = t[0][0];
  f[8*1] = t[0][1];
  f[8*2] = t[0][6];
  f[8*3] = t[0][3];
  f[8*4] = t[0][7];
  f[8*5] = t[0][2];
  f[8*6] = t[0][5];
  f[8*7] = t[0][4];
}

void idct8x8(double mat[8][8])
{
  if (!idct_inited) idct_init();
  double *x = (double*)mat, y[64];
  for (int i = 0; i < 8; i++) idct8(x + 8*i, y + i);
  for (int i = 0; i < 8; i++) idct8(y + 8*i, x + i);
}
